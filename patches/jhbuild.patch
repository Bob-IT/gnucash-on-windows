diff --git a/jhbuild/modtypes/__init__.py b/jhbuild/modtypes/__init__.py
index 2919a9f9..8b5f915f 100644
--- a/jhbuild/modtypes/__init__.py
+++ b/jhbuild/modtypes/__init__.py
@@ -311,14 +311,16 @@ them into the prefix."""
 
         install_succeeded = False
         save_broken_tree = False
         broken_name = destdir + '-broken'
         destdir_prefix = os.path.join(destdir, stripped_prefix)
-        new_contents = fileutils.accumulate_dirtree_contents(destdir_prefix)
+        new_contents = []
         errors = []
+        num_copied = 0
         if os.path.isdir(destdir_prefix):
             logging.info(_('Moving temporary DESTDIR %r into build prefix') % (destdir, ))
+            new_contents = fileutils.accumulate_dirtree_contents(destdir_prefix)
             num_copied = self._process_install_files(destdir, destdir_prefix,
                                                      buildscript.config.prefix,
                                                      errors)
 
             # Now the destdir should have a series of empty directories:
@@ -342,11 +344,12 @@ them into the prefix."""
                                                                                                                                'dest': broken_name})
                 save_broken_tree = True
             # Even if there are some files outside the DESTDIR, count that as success for now; we just warn
             install_succeeded = True
         else:
-            save_broken_tree = True
+            install_succeeded = True
+#            save_broken_tree = True
 
         if save_broken_tree:
             if os.path.exists(broken_name):
                 assert broken_name.startswith(buildscript.config.top_builddir)
                 shutil.rmtree(broken_name)

diff --git a/jhbuild/modtypes/cmake.py b/jhbuild/modtypes/cmake.py
index 1bd44e32..4064faaa 100644
--- a/jhbuild/modtypes/cmake.py
+++ b/jhbuild/modtypes/cmake.py
@@ -162,13 +162,13 @@ class CMakeModule(MakeModule, NinjaModule, DownloadableModule):
 
     def do_install(self, buildscript):
         buildscript.set_action(_('Installing'), self)
         destdir = self.prepare_installroot(buildscript)
         if self.use_ninja:
-            self.ninja(buildscript, 'install', env={'DESTDIR': destdir})
+            self.ninja(buildscript, 'install')
         else:
-            self.make(buildscript, 'install DESTDIR={}'.format(destdir))
+            self.make(buildscript, 'install')
         self.process_install(buildscript, self.get_revision())
     do_install.depends = [PHASE_BUILD]
 
     def xml_tag_and_attrs(self):
         return 'cmake', [('id', 'name', None),

diff --git a/jhbuild/utils/systeminstall.py b/jhbuild/utils/systeminstall.py
index 610be80d..50c56aab 100644
--- a/jhbuild/utils/systeminstall.py
+++ b/jhbuild/utils/systeminstall.py
@@ -41,11 +41,11 @@ def get_installed_pkgconfigs(config):
         return pkgversions
 
     pkgs = []
     for line in stdout.splitlines():
         pkg, rest = line.split(None, 1)
-        pkgs.append(pkg)
+        pkgs.append(pkg.lstrip('/'))
 
     # see if we can get the versions "the easy way"
     try:
         stdout = subprocess.check_output(['pkg-config', '--modversion'] + pkgs, universal_newlines=True, stderr=subprocess.DEVNULL)
     except (subprocess.CalledProcessError, OSError):

diff --git a/jhbuild/utils/packagedb.py b/jhbuild/utils/packagedb.py
index 610be80d..50c56aab 100644
--- a/jhbuild/utils/packagedb.py
+++ b/jhbuild/utils/packagedb.py
@@ -74,11 +74,12 @@ class PackageEntry:
         writer.commit()
 
         # write manifest
         fileutils.mkdir_with_parents(os.path.join(self.dirname, 'manifests'))
         writer = fileutils.SafeWriter(os.path.join(self.dirname, 'manifests', self.package))
-        writer.fp.write('\n'.join(self.manifest).encode('utf-8', 'backslashreplace') + b'\n')
+        if (self.manifest):
+            writer.fp.write('\n'.join(self.manifest).encode('utf-8', 'backslashreplace') + b'\n')
         writer.commit()
 
     def remove(self):
         # remove info file
         fileutils.ensure_unlinked(os.path.join(self.dirname, 'info', self.package))

